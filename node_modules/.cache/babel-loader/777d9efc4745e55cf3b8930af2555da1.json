{"ast":null,"code":"import _slicedToArray from \"/home/jenna/Springboard/react-jobly/my-app-name/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\n\nfunction useLocalStorage(key) {\n  var firstValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var initialValue = localStorage.getItem(key) || firstValue;\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      item = _useState2[0],\n      setItem = _useState2[1];\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n  return [item, setItem];\n}\n\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","firstValue","initialValue","localStorage","getItem","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"sources":["/home/jenna/Springboard/react-jobly/my-app-name/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(function setKeyInLocalStorage() {\r\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n    if (item === null) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAAiD;EAAA,IAAnBC,UAAmB,uEAAN,IAAM;EAC/C,IAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,KAA6BC,UAAlD;;EAD+C,gBAGvBJ,QAAQ,CAACK,YAAD,CAHe;EAAA;EAAA,IAGxCG,IAHwC;EAAA,IAGlCC,OAHkC;;EAK/CR,SAAS,CAAC,SAASS,oBAAT,GAAgC;IACxCC,OAAO,CAACC,KAAR,CAAc,iCAAd,EAAiD,OAAjD,EAA0DJ,IAA1D;;IAEA,IAAIA,IAAI,KAAK,IAAb,EAAmB;MACjBF,YAAY,CAACO,UAAb,CAAwBV,GAAxB;IACD,CAFD,MAEO;MACLG,YAAY,CAACG,OAAb,CAAqBN,GAArB,EAA0BK,IAA1B;IACD;EACF,CARQ,EAQN,CAACL,GAAD,EAAMK,IAAN,CARM,CAAT;EAUA,OAAO,CAACA,IAAD,EAAOC,OAAP,CAAP;AACD;;AAED,eAAeP,eAAf"},"metadata":{},"sourceType":"module"}