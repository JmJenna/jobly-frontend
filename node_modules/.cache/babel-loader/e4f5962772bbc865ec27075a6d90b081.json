{"ast":null,"code":"import _toConsumableArray from \"/home/jenna/Springboard/react-jobly/my-app-name/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jenna/Springboard/react-jobly/my-app-name/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/jenna/Springboard/react-jobly/my-app-name/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jenna/Springboard/react-jobly/my-app-name/src/App.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./router/Navigation\";\nimport Routes from \"./router/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Key name for storing token in localStorage for \"remember me\" re-login\n\nexport var TOKEN_STORAGE_ID = \"jobly-token\";\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      infoLoaded = _useState2[0],\n      setInfoLoaded = _useState2[1];\n\n  var _useState3 = useState(new Set([])),\n      _useState4 = _slicedToArray(_useState3, 2),\n      applicationIds = _useState4[0],\n      setApplicationIds = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUser = _useState6[0],\n      setCurrentUser = _useState6[1];\n\n  var _useLocalStorage = useLocalStorage(TOKEN_STORAGE_ID),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      token = _useLocalStorage2[0],\n      setToken = _useLocalStorage2[1];\n\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token); // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    function getCurrentUser() {\n      return _getCurrentUser.apply(this, arguments);\n    } // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n\n    function _getCurrentUser() {\n      _getCurrentUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _jwt$decode, username, _currentUser;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!token) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.prev = 1;\n                _jwt$decode = jwt.decode(token), username = _jwt$decode.username; // put the token on the Api class so it can use it to call the API.\n\n                JoblyApi.token = token;\n                _context.next = 6;\n                return JoblyApi.getCurrentUser(username);\n\n              case 6:\n                _currentUser = _context.sent;\n                setCurrentUser(_currentUser);\n                setApplicationIds(new Set(_currentUser.applications));\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(\"App loadUserInfo: problem loading\", _context.t0);\n                setCurrentUser(null);\n\n              case 15:\n                setInfoLoaded(true);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 11]]);\n      }));\n      return _getCurrentUser.apply(this, arguments);\n    }\n\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n  /** Handles site-wide logout. */\n\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  function signup(_x) {\n    return _signup.apply(this, arguments);\n  }\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\n\n  function _signup() {\n    _signup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(signupData) {\n      var _token;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return JoblyApi.signup(signupData);\n\n            case 3:\n              _token = _context2.sent;\n              setToken(_token);\n              console.log(setToken(_token));\n              return _context2.abrupt(\"return\", {\n                success: true\n              });\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(\"signup failed\", _context2.t0);\n              return _context2.abrupt(\"return\", {\n                success: false,\n                errors: _context2.t0\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 9]]);\n    }));\n    return _signup.apply(this, arguments);\n  }\n\n  function login(_x2) {\n    return _login.apply(this, arguments);\n  }\n  /** Checks if a job has been applied for. */\n\n\n  function _login() {\n    _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(loginData) {\n      var _token2;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return JoblyApi.login(loginData);\n\n            case 3:\n              _token2 = _context3.sent;\n              setToken(_token2);\n              return _context3.abrupt(\"return\", {\n                success: true\n              });\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"login failed\", _context3.t0);\n              return _context3.abrupt(\"return\", {\n                success: false,\n                errors: _context3.t0\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 8]]);\n    }));\n    return _login.apply(this, arguments);\n  }\n\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n  /** Apply to a job: make API call and update set of application IDs. */\n\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([].concat(_toConsumableArray(applicationIds), [id])));\n  }\n\n  if (!infoLoaded) return /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 27\n    }\n  });\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      setCurrentUser: setCurrentUser,\n      hasAppliedToJob: hasAppliedToJob,\n      applyToJob: applyToJob\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Navigation, {\n    logout: logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    login: login,\n    signup: signup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","useLocalStorage","Navigation","Routes","LoadingSpinner","JoblyApi","UserContext","jwt","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","currentUser","setCurrentUser","token","setToken","console","debug","loadUserInfo","getCurrentUser","decode","username","applications","error","logout","signup","signupData","log","success","errors","login","loginData","hasAppliedToJob","id","has","applyToJob"],"sources":["/home/jenna/Springboard/react-jobly/my-app-name/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./router/Navigation\";\nimport Routes from \"./router/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      console.log(setToken(token))\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}