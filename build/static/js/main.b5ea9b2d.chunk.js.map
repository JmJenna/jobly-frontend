{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","router/Navigation.js","homepage/Homepage.js","common/Alert.js","auth/Signup.js","auth/Login.js","common/SearchForm.js","api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","profile/ProfileForm.js","router/PrivacyRoute.js","router/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","_ref","logout","currentUser","useContext","react_default","a","createElement","Navbar","style","backgroundColor","collapseOnSelect","expand","className","Container","react_router_dom","color","to","index_esm","Toggle","aria-controls","Collapse","id","Nav","Item","Link","href","onClick","first_name","username","Homepage","login","history","useHistory","_handleSubmit","asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","preventDefault","password","push","stop","apply","this","onSubmit","_x","Alert","_ref$type","type","_ref$messages","messages","concat","role","map","error","Signup","signup","firstName","lastName","email","formData","setFormData","_useState3","_useState4","formErrors","setFormErrors","handleSubmit","Signup_regeneratorRuntime","evt","result","sent","log","success","errors","handleChange","_evt$target","target","name","value","data","objectSpread","defineProperty","onChange","common_Alert","Login","Login_regeneratorRuntime","l","autoComplete","required","SearchForm","searchFor","searchTerm","setSearchTerm","trim","InputGroup","size","Form","Control","placeholder","aria-label","aria-describedby","Button","border","fa_index_esm","JoblyApi","endpoint","method","url","process","headers","Authorization","token","params","axios","t0","response","message","Array","isArray","request","res","user","companies","handle","company","title","jobs","CompanyCard","description","textDecoration","hi_index_esm","LoadingSpinner","CompanyList","setCompanies","search","_search","CompanyList_regeneratorRuntime","getCompanies","padding","common_SearchForm","c","companies_CompanyCard","common_LoadingSpinner","JobCard","salary","equity","companyName","_useContext","hasAppliedToJob","applyToJob","applied","setApplied","_handleApply","JobCard_regeneratorRuntime","abrupt","digitsRev","salaryStr","toString","i","reverse","join","formatSalary","disabled","JobCardList","job","jobs_JobCard","JobList","setJobs","JobList_regeneratorRuntime","getJobs","jobs_JobCardList","CompanyDetail","useParams","setCompany","_getCompany","CompanyDetail_regeneratorRuntime","getCompany","t1","paddingBottom","ProfileForm","setCurrentUser","_useState5","_useState6","saveConfirmed","setSaveConfirmed","ProfileForm_regeneratorRuntime","profileData","updatedUser","saveProfile","f","height","toUpperCase","Row","xs","md","lg","Card","PrivacyRoute","exact","path","children","react_router","Routes","homepage_Homepage","auth_Login","auth_Signup","router_PrivacyRoute","companies_CompanyList","companies_CompanyDetail","jobs_JobList","profile_ProfileForm","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","_useLocalStorage","_useLocalStorage2","setToken","_signup","App_regeneratorRuntime","_callee2","signupData","_token","_context2","_login","_callee3","loginData","_token2","_context3","has","_getCurrentUser","_jwt$decode","_currentUser","jwt","decode","getCurrentUser","applications","auth_UserContext","Provider","toConsumableArray","router_Navigation","router_Routes","_x2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5ea9b2d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(function setKeyInLocalStorage() {\r\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n    if (item === null) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\n\r\n/** Context: provides currentUser object and setter for it throughout app. */\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport default UserContext;","import React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport {Nav, Navbar, Container} from 'react-bootstrap';\r\nimport { MdOutlineMapsHomeWork } from \"react-icons/md\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport \"./Navigation.css\";\r\n\r\n\r\n/** Navigation bar for site. Shows up on every page.\r\n *\r\n * When user is logged in, shows links to main areas of site. When not,\r\n * shows link to Login and Signup forms.\r\n *\r\n * Rendered by App.\r\n */\r\n\r\nfunction Navigation({ logout }) {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\r\n\r\n  function loggedInNav() {\r\n    return (\r\n      <Nav className=\"text-center\">               \r\n      <Nav.Item>\r\n          <Nav.Link style={{color:\"white\"}} href=\"/companies\">Companies</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n          <Nav.Link style={{color:\"white\"}} href=\"/jobs\">Jobs</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n          <Nav.Link style={{color:\"white\"}} href=\"/profile\">Profile</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Link style={{color:\"white\"}} className=\"nav-link\" to=\"/\" onClick={logout}>\r\n          Log out {currentUser.first_name || currentUser.username}\r\n        </Link>\r\n      </Nav.Item>\r\n    </Nav>     \r\n    );\r\n  }\r\n \r\n\r\n  function loggedOutNav() {\r\n    return (\r\n      <Nav className=\"text-center\">               \r\n      <Nav.Item>\r\n          <Nav.Link style={{color:\"white\"}}  href=\"/login\">Log in</Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n          <Nav.Link style={{color:\"white\"}} href=\"/signup\">Sing up</Nav.Link>\r\n      </Nav.Item>\r\n      </Nav>    \r\n    );\r\n  }\r\n\r\n  return (\r\n    <Navbar style={{backgroundColor:\"#0072b1\"}} collapseOnSelect expand=\"lg\" className=\"fs-5\">\r\n      <Container>\r\n        <Link style={{color:\"white\"}} className=\"navbar-brand fs-2\" to=\"/\">\r\n          <MdOutlineMapsHomeWork /> Jobly\r\n        </Link>\r\n        <Navbar.Toggle style={{color:\"white\"}} aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Collapse style={{color:\"white\"}} id=\"responsive-navbar-nav\" className=\"justify-content-end\">  \r\n                {currentUser ? loggedInNav() : loggedOutNav()}              \r\n         </Navbar.Collapse>\r\n        </Container>\r\n     </Navbar> \r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport {  useHistory } from \"react-router-dom\";\r\nimport { MdOutlineMapsHomeWork } from \"react-icons/md\";\r\nimport './Homepage.css'\r\n\r\nfunction Homepage({login}) {\r\n  const history = useHistory();\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    await login({\r\n      username: \"user123\",\r\n      password: \"password\",\r\n    });\r\n    \r\n    history.push(\"/companies\");\r\n  }\r\n  \r\n  \r\n    return (\r\n        <div className=\"Homepage\">\r\n          <div className=\"container text-center\">\r\n            <h1 className=\"mb-4 font-weight-bold\">Welcome to Jobly <MdOutlineMapsHomeWork /></h1>\r\n            <p className=\"lead\">Find your dream job. Work at your dream company.</p>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                  <button  style={{backgroundColor:\"#0072b1\", color:\"white\"}} \r\n                           className=\"btn btn-lg mt-4\">\r\n                           DEMO USER</button>\r\n                </form>\r\n\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Homepage;","import React from \"react\";\r\n\r\n/** Presentational component for showing bootstrap-style alerts.\r\n *\r\n * { LoginForm, SignupForm, ProfileForm } -> Alert\r\n **/\r\n\r\nfunction Alert({ type = \"danger\", messages = [] }) {\r\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\r\n\r\n  return (\r\n      <div className={`alert alert-${type}`} role=\"alert\">\r\n        {messages.map(error => (\r\n            <p className=\"mb-0 small\" key={error}>\r\n              {error}\r\n            </p>\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/** Signup form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls signup function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> SignupForm -> Alert\r\n * Routed as /signup\r\n */\r\n\r\nfunction Signup({ signup }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"SignupForm\",\r\n      \"signup=\", typeof signup,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await signup(formData);\r\n    \r\n    console.log(\"result\",result)\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(data => ({ ...data, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"SignupForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h2 className=\"mb-3\">Sign Up</h2>\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>First name</label>\r\n                  <input\r\n                      name=\"firstName\"\r\n                      className=\"form-control\"\r\n                      value={formData.firstName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Last name</label>\r\n                  <input\r\n                      name=\"lastName\"\r\n                      className=\"form-control\"\r\n                      value={formData.lastName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control\"\r\n                      value={formData.email}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null\r\n                }\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Signup;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/** Login form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls login function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> LoginForm -> Alert\r\n * Routed as /login\r\n */\r\n\r\nfunction Login({ login }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"LoginForm\",\r\n      \"login=\", typeof login,\r\n      \"formData=\", formData,\r\n      \"formErrors\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await login(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(l => ({ ...l, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"LoginForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h3 className=\"mb-3\">Log In</h3>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"username\"\r\n                      required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"current-password\"\r\n                      required\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null}\r\n\r\n                <button\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport { Container , InputGroup , Button  ,Form} from 'react-bootstrap';\r\nimport \"./SearchForm.css\";\r\n\r\n/** Search widget.\r\n *\r\n * Appears on CompanyList and JobList so that these can be filtered\r\n * down.\r\n *\r\n * This component doesn't *do* the searching, but it renders the search\r\n * form and calls the `searchFor` function prop that runs in a parent to do the\r\n * searching.\r\n *\r\n * { CompanyList, JobList } -> SearchForm\r\n */\r\n\r\nfunction SearchForm({ searchFor }) {\r\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\"); \r\n\r\n  /** Tell parent to filter */\r\n  function handleSubmit(evt) {\r\n    // take care of accidentally trying to search for just spaces\r\n    evt.preventDefault();\r\n    searchFor(searchTerm.trim() || undefined);\r\n    setSearchTerm(searchTerm.trim());\r\n  }\r\n\r\n  /** Update form fields */\r\n  function handleChange(evt) {\r\n    setSearchTerm(evt.target.value);\r\n  }\r\n\r\n  return (\r\n      <div>\r\n      <Container className=\"SearchContain text-center\">         \r\n      <form onSubmit={handleSubmit}>  \r\n      <InputGroup size=\"lg\" className=\"mb-3 SearchForm\">       \r\n        <Form.Control\r\n          placeholder=\"Enter search term..\"\r\n          aria-label=\"searchTerm\"\r\n          aria-describedby=\"basic-addon2\"\r\n          value={searchTerm}\r\n          onChange={handleChange}\r\n        />\r\n        <Button style={{color:\"white\" ,backgroundColor:\"#0072b1\",border:\"#0072b1\"}} \r\n                id=\"button-addon2\" type=\"submit\">\r\n          <FaSearch />\r\n        </Button >\r\n      </InputGroup>        \r\n      </form>\r\n      </Container> \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default JoblyApi;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { HiOfficeBuilding } from \"react-icons/hi\";\r\n\r\nimport \"./CompanyCard.css\";\r\n\r\n/** Show limited information about a company\r\n *\r\n * Is rendered by CompanyList to show a \"card\" for each company.\r\n *\r\n * CompanyList -> CompanyCard\r\n */\r\n\r\nfunction CompanyCard({ name, description, handle }) {\r\n\r\n\r\n  return (\r\n      <Link style={{textDecoration:\"none\"}} className=\"CompanyCard card\" to={`/companies/${handle}`}>\r\n        <div className=\"card-body\">\r\n          <h3 style={{color:\"#0072b1\" }} className=\"card-title\">\r\n          <HiOfficeBuilding /> {name} \r\n          </h3>\r\n          <p><small>{description}</small></p>\r\n        </div>\r\n      </Link>\r\n  );\r\n}\r\n\r\nexport default CompanyCard;\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\n/** Loading message used by components that fetch API data. */\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n      <div className=\"LoadingSpinner\">\r\n        Loading ...\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\r\nimport SearchForm from \"../common/SearchForm\";\r\nimport JoblyApi from \"../api\";\r\nimport CompanyCard from \"./CompanyCard\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\nimport { Container } from 'react-bootstrap';\r\n\r\n/** Show page with list of companies.\r\n *\r\n * On mount, loads companies from API.\r\n * Re-loads filtered companies on submit from search form.\r\n *\r\n * This is routed to at /companies\r\n *\r\n * Routes -> { CompanyCard, SearchForm }\r\n */\r\n\r\nfunction CompanyList() {\r\n  console.debug(\"CompanyList\");\r\n\r\n  const [companies, setCompanies] = useState(null);\r\n\r\n  useEffect(function getCompaniesOnMount() {\r\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads companies. */\r\n  async function search(name) {\r\n    let companies = await JoblyApi.getCompanies(name);\r\n    setCompanies(companies);\r\n  }\r\n\r\n  if (!companies) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyList col-md-8 offset-md-2\">\r\n        <Container>\r\n        <h2  className=\"text-center\" style={{ padding: \"2rem\"}}>Find your dream company</h2>\r\n        <SearchForm searchFor={search} />\r\n        {companies.length\r\n            ? (\r\n                <div className=\"CompanyList-list\">\r\n                  {companies.map(c => (\r\n                      <CompanyCard\r\n                          key={c.handle}\r\n                          handle={c.handle}\r\n                          name={c.name}\r\n                          description={c.description}\r\n                      />\r\n                  ))}\r\n                </div>\r\n            ) : (\r\n                <p className=\"lead\">Sorry, no results were found!</p>\r\n            )}\r\n            </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyList;\r\n","import React, { useContext, useState } from \"react\";\r\nimport \"./JobCard.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport { MdOutlineWork } from \"react-icons/md\";\r\n\r\n/** Show limited information about a job.\r\n *\r\n * Is rendered by JobCardList to show a \"card\" for each job.\r\n *\r\n * Receives apply func prop from parent, which is called on apply.\r\n *\r\n * JobCardList -> JobCard\r\n */\r\n\r\nfunction JobCard({ id, title, salary, equity, companyName }) {\r\n  console.debug(\"JobCard\");\r\n\r\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\r\n  const [applied, setApplied] = useState();\r\n\r\n  React.useEffect(function updateAppliedStatus() {\r\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\r\n\r\n    setApplied(hasAppliedToJob(id));\r\n  }, [id, hasAppliedToJob]);\r\n\r\n  /** Apply for a job */\r\n  async function handleApply(evt) {\r\n    if (hasAppliedToJob(id)) return;\r\n    applyToJob(id);\r\n    setApplied(true);\r\n  }\r\n\r\n  return (\r\n      <div className=\"JobCard card\"> {applied}\r\n        <div className=\"card-body\">\r\n          <h3 style={{color:\"#0072b1\" }} className=\"card-title\"><MdOutlineWork /> {title}</h3>\r\n          <h5>{companyName}</h5>\r\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\r\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\r\n          <div className=\"d-flex justify-content-end\">\r\n          <button\r\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\r\n              onClick={handleApply}\r\n              disabled={applied}\r\n          >\r\n            {applied ? \"Applied\" : \"Apply\"}\r\n          </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n/** Render integer salary like '$1,250,343' */\r\n\r\nfunction formatSalary(salary) {\r\n  const digitsRev = [];\r\n  const salaryStr = salary.toString();\r\n\r\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\r\n    digitsRev.push(salaryStr[i]);\r\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\r\n  }\r\n\r\n  return digitsRev.reverse().join(\"\");\r\n}\r\n\r\n\r\nexport default JobCard;\r\n","import React from \"react\";\r\nimport JobCard from \"./JobCard\";\r\n\r\n/** Show list of job cards.\r\n *\r\n * Used by both JobList and CompanyDetail to list jobs. Receives an apply\r\n * func prop which will be called by JobCard on apply.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n * CompanyDetail -> JobCardList -> JobCard\r\n *\r\n */\r\n\r\nfunction JobCardList({ jobs, apply }) {\r\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\r\n\r\n  return (\r\n      <div className=\"JobCardList\">\r\n        {jobs.map(job => (\r\n            <JobCard\r\n                key={job.id}\r\n                id={job.id}\r\n                title={job.title}\r\n                salary={job.salary}\r\n                equity={job.equity}\r\n                companyName={job.companyName}\r\n            />\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobCardList;","import React, { useState, useEffect } from \"react\";\r\nimport Search from \"../common/SearchForm\";\r\nimport JoblyApi from \"../api\";\r\nimport JobCardList from \"./JobCardList\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\nimport { Container } from 'react-bootstrap';\r\n\r\n/** Show page with list of jobs.\r\n *\r\n * On mount, loads jobs from API.\r\n * Re-loads filtered jobs on submit from search form.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n *\r\n * This is routed to at /jobs\r\n */\r\n\r\nfunction JobList() {\r\n  console.debug(\"JobList\");\r\n\r\n  const [jobs, setJobs] = useState(null);\r\n\r\n  useEffect(function getAllJobsOnMount() {\r\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads jobs. */\r\n  async function search(title) {\r\n    let jobs = await JoblyApi.getJobs(title);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  if (!jobs) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"JobList col-md-8 offset-md-2\">\r\n         <Container>\r\n        <h2  className=\"text-center\" style={{ padding: \"2rem\"}}>Find your dream job</h2>\r\n        <Search searchFor={search} />\r\n        {jobs.length\r\n            ? <JobCardList jobs={jobs} />\r\n            : <p className=\"lead\">Sorry, no results were found!</p>\r\n        }\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport JoblyApi from \"../api\";\r\nimport JobCardList from \"../jobs/JobCardList\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\nimport { Container } from 'react-bootstrap';\r\n\r\n/** Company Detail page.\r\n *\r\n * Renders information about company, along with the jobs at that company.\r\n *\r\n * Routed at /companies/:handle\r\n *\r\n * Routes -> CompanyDetail -> JobCardList\r\n */\r\n\r\nfunction CompanyDetail() {\r\n  const { handle } = useParams();\r\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\r\n\r\n  const [company, setCompany] = useState(null);\r\n\r\n  useEffect(function getCompanyAndJobsForUser() {\r\n    async function getCompany() {\r\n      setCompany(await JoblyApi.getCompany(handle));\r\n    }\r\n\r\n    getCompany();\r\n  }, [handle]);\r\n\r\n  if (!company) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\r\n        <Container>\r\n        <h3 style={{ color:\"#0072b1\", padding:\"1.5rem\"}} className=\"text-center\">{company.name}</h3>\r\n        <h6 style={{paddingBottom:\"2rem\"}} className=\"text-center\">{company.description}</h6>\r\n        <JobCardList jobs={company.jobs} />\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyDetail;\r\n","import React , {useState , useContext} from 'react';\r\nimport Alert from \"../common/Alert\";\r\nimport JoblyApi from \"../api\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport {Container, Row , Card } from 'react-bootstrap';\r\n\r\nfunction ProfileForm(){\r\n    const { currentUser, setCurrentUser } = useContext(UserContext);\r\n    const [formData, setFormData] = useState({\r\n      firstName: currentUser.firstName,\r\n      lastName: currentUser.lastName,\r\n      email: currentUser.email,\r\n      username: currentUser.username,\r\n      password: \"\",\r\n    });\r\n    const [formErrors, setFormErrors] = useState([]);\r\n  \r\n    // switch to use our fancy limited-time-display message hook\r\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\r\n    // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\r\n\r\n    console.debug(\r\n        \"ProfileForm\",\r\n        \"currentUser=\", currentUser,\r\n        \"formData=\", formData,\r\n        \"formErrors=\", formErrors,\r\n        \"saveConfirmed=\", saveConfirmed,\r\n    );\r\n\r\n    /** on form submit:\r\n   * - attempt save to backend & report any errors\r\n   * - if successful\r\n   *   - clear previous error messages and password\r\n   *   - show save-confirmed message\r\n   *   - set current user info throughout the site\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    let profileData = {\r\n      firstName: formData.firstName,\r\n      lastName: formData.lastName,\r\n      email: formData.email,\r\n      password: formData.password,\r\n    };\r\n\r\n    let username = formData.username;\r\n    let updatedUser;\r\n\r\n    try {\r\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\r\n    } catch (errors) {\r\n      debugger;\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n\r\n    setFormData(f => ({ ...f, password: \"\" }));\r\n    setFormErrors([]);\r\n    setSaveConfirmed(true);\r\n\r\n    // trigger reloading of user information throughout the site\r\n    setCurrentUser(updatedUser);\r\n  }\r\n\r\n  /** Handle form data changing */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(f => ({\r\n      ...f,\r\n      [name]: value,\r\n    }));\r\n    setFormErrors([]);\r\n  }\r\n  \r\n    return(\r\n        <div>\r\n        <Container style={{ height:\"80vh\"}} className=\"text-center\">\r\n        <h3 style={{ padding:\"3rem\" }} className=\"Profile mb-3\">{formData.username.toUpperCase()}'s profile</h3>\r\n        <Row xs={1} md={2} lg={3} className=\"justify-content-center\">\r\n        <Card className=\"ProfileCard\"> \r\n          <div className=\"card-body\">\r\n            <form>\r\n              <div style={{padding:'1rem'}} className=\"form-group\">\r\n                <label>First Name</label>\r\n                <input\r\n                    name=\"firstName\"\r\n                    className=\"form-control\"\r\n                    value={formData.firstName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div style={{padding:'1rem'}}  className=\"form-group\">\r\n                <label>Last Name</label>\r\n                <input\r\n                    name=\"lastName\"\r\n                    className=\"form-control\"\r\n                    value={formData.lastName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div style={{padding:'1rem'}}  className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                    name=\"email\"\r\n                    className=\"form-control\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div style={{padding:'1rem'}}  className=\"form-group\">\r\n                <label>Confirm password to make changes:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    value={formData.password}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n\r\n              {formErrors.length\r\n                  ? <Alert type=\"danger\" messages={formErrors} />\r\n                  : null}\r\n\r\n              {saveConfirmed\r\n                  ?\r\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\r\n                  : null}\r\n\r\n              <button\r\n                  style={{backgroundColor:\"#0072b1\", color:\"white\"}} \r\n                  className=\"btn btn-block mt-4\"\r\n                  onClick={handleSubmit}\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </Card>  \r\n        </Row>\r\n       </Container> \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\nfunction PrivacyRoute({ exact, path, children }) {\r\n    const { currentUser } = useContext(UserContext);\r\n  \r\n    console.debug(\r\n        \"PrivateRoute\",\r\n        \"exact=\", exact,\r\n        \"path=\", path,\r\n        \"currentUser=\", currentUser,\r\n    );\r\n  \r\n    if (!currentUser) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  \r\n    return (\r\n        <Route exact={exact} path={path}>\r\n          {children}\r\n        </Route>\r\n    );\r\n  }\r\n\r\n\r\nexport default PrivacyRoute;","import React from 'react';\r\nimport {Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Homepage from '../homepage/Homepage'\r\nimport Signup from '../auth/Signup';\r\nimport Login from '../auth/Login';\r\nimport CompanyList from '../companies/CompanyList';\r\nimport JobList from '../jobs/JobList';\r\nimport CompanyDetail from '../companies/CompanyDetail';\r\nimport ProfileForm from '../profile/ProfileForm';\r\nimport PrivacyRoute from './PrivacyRoute';\r\n\r\n\r\nfunction Routes({login , signup}){\r\nreturn(\r\n    <div>\r\n\r\n        <Switch>\r\n\r\n            <Route exact path=\"/\">\r\n                <Homepage login={login}/>\r\n            </Route>\r\n\r\n            <Route exact path=\"/login\">\r\n                <Login login={login}/>\r\n            </Route>\r\n\r\n            <Route exact path=\"/signup\">\r\n                <Signup signup={signup}/>\r\n            </Route>\r\n\r\n            <PrivacyRoute exact path=\"/companies\">\r\n                <CompanyList />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/companies/:handle\">\r\n                <CompanyDetail />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/jobs\">\r\n                <JobList />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/profile\">\r\n                <ProfileForm />\r\n            </PrivacyRoute>\r\n\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Routes;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./router/Navigation\";\nimport Routes from \"./router/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      console.log(setToken(token))\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}