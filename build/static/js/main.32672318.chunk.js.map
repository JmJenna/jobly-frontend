{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","router/Navigation.js","homepage/Homepage.js","common/Alert.js","auth/Signup.js","auth/Login.js","common/SearchForm.js","api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","profile/ProfileForm.js","router/PrivacyRoute.js","router/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","_ref","logout","currentUser","useContext","react_default","a","createElement","className","react_router_dom","to","onClick","first_name","username","Homepage","firstName","Alert","_ref$type","type","_ref$messages","messages","concat","role","map","error","Signup","signup","history","useHistory","password","lastName","email","formData","setFormData","_useState3","_useState4","formErrors","setFormErrors","handleSubmit","_x","_handleSubmit","apply","this","asyncToGenerator","_regeneratorRuntime","mark","_callee","evt","result","wrap","_context","prev","next","preventDefault","sent","log","success","push","errors","stop","handleChange","_evt$target","target","name","value","data","objectSpread","defineProperty","onSubmit","onChange","common_Alert","Login","login","Login_regeneratorRuntime","l","autoComplete","required","SearchForm","searchFor","searchTerm","setSearchTerm","trim","placeholder","JoblyApi","endpoint","method","url","process","headers","Authorization","token","params","axios","t0","response","message","Array","isArray","request","res","user","companies","handle","company","title","jobs","id","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","CompanyList","setCompanies","search","_search","CompanyList_regeneratorRuntime","getCompanies","common_SearchForm","c","companies_CompanyCard","common_LoadingSpinner","JobCard","salary","equity","companyName","_useContext","hasAppliedToJob","applyToJob","applied","setApplied","_handleApply","JobCard_regeneratorRuntime","abrupt","digitsRev","salaryStr","toString","i","reverse","join","formatSalary","disabled","JobCardList","job","jobs_JobCard","JobList","setJobs","JobList_regeneratorRuntime","getJobs","jobs_JobCardList","CompanyDetail","useParams","setCompany","_getCompany","CompanyDetail_regeneratorRuntime","getCompany","t1","ProfileForm","setCurrentUser","_useState5","_useState6","saveConfirmed","setSaveConfirmed","ProfileForm_regeneratorRuntime","profileData","updatedUser","saveProfile","f","PrivacyRoute","exact","path","children","react_router","Routes","homepage_Homepage","auth_Login","auth_Signup","router_PrivacyRoute","companies_CompanyList","companies_CompanyDetail","jobs_JobList","profile_ProfileForm","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","_useLocalStorage","_useLocalStorage2","setToken","_signup","App_regeneratorRuntime","_callee2","signupData","_token","_context2","_login","_callee3","loginData","_token2","_context3","has","_getCurrentUser","_jwt$decode","_currentUser","jwt","decode","getCurrentUser","applications","auth_UserContext","Provider","toConsumableArray","router_Navigation","router_Routes","_x2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32672318.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(function setKeyInLocalStorage() {\r\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n    if (item === null) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, item);\r\n    }\r\n  }, [key, item]);\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React from \"react\";\r\n\r\n/** Context: provides currentUser object and setter for it throughout app. */\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport default UserContext;","import React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport \"./Navigation.css\";\r\n\r\n\r\n/** Navigation bar for site. Shows up on every page.\r\n *\r\n * When user is logged in, shows links to main areas of site. When not,\r\n * shows link to Login and Signup forms.\r\n *\r\n * Rendered by App.\r\n */\r\n\r\nfunction Navigation({ logout }) {\r\n  const { currentUser } = useContext(UserContext);\r\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\r\n\r\n  function loggedInNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/companies\">\r\n              Companies\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/jobs\">\r\n              Jobs\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/profile\">\r\n              Profile\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\r\n              Log out {currentUser.first_name || currentUser.username}\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  function loggedOutNav() {\r\n    return (\r\n        <ul className=\"navbar-nav ml-auto\">\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/login\">\r\n              Login\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item mr-4\">\r\n            <NavLink className=\"nav-link\" to=\"/signup\">\r\n              Sign Up\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n    );\r\n  }\r\n\r\n  return (\r\n      <nav className=\"Navigation navbar navbar-expand-md\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Jobly\r\n        </Link>\r\n        {currentUser ? loggedInNav() : loggedOutNav()}\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport './Homepage.css'\r\n\r\nfunction Homepage() {\r\n    const { currentUser } = useContext(UserContext);\r\n    console.debug(\"Homepage\", \"currentUser=\", currentUser);\r\n  \r\n    return (\r\n        <div className=\"Homepage\">\r\n          <div className=\"container text-center\">\r\n            <h1 className=\"mb-4 font-weight-bold\">Jobly</h1>\r\n            <p className=\"lead\">All the jobs in one, convenient place.</p>\r\n            {currentUser\r\n                ? <h2>\r\n                  Welcome Back, {currentUser.firstName || currentUser.username}!\r\n                </h2>\r\n                : (\r\n                    <p>\r\n                      <Link className=\"btn btn-primary font-weight-bold mr-3\"\r\n                            to=\"/login\">\r\n                        Log in\r\n                      </Link>\r\n                      <Link className=\"btn btn-primary font-weight-bold\"\r\n                            to=\"/signup\">\r\n                        Sign up\r\n                      </Link>\r\n                    </p>\r\n                )}\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Homepage;","import React from \"react\";\r\n\r\n/** Presentational component for showing bootstrap-style alerts.\r\n *\r\n * { LoginForm, SignupForm, ProfileForm } -> Alert\r\n **/\r\n\r\nfunction Alert({ type = \"danger\", messages = [] }) {\r\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\r\n\r\n  return (\r\n      <div className={`alert alert-${type}`} role=\"alert\">\r\n        {messages.map(error => (\r\n            <p className=\"mb-0 small\" key={error}>\r\n              {error}\r\n            </p>\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/** Signup form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls signup function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> SignupForm -> Alert\r\n * Routed as /signup\r\n */\r\n\r\nfunction Signup({ signup }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"SignupForm\",\r\n      \"signup=\", typeof signup,\r\n      \"formData=\", formData,\r\n      \"formErrors=\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await signup(formData);\r\n    \r\n    console.log(\"result\",result)\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(data => ({ ...data, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"SignupForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h2 className=\"mb-3\">Sign Up</h2>\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>First name</label>\r\n                  <input\r\n                      name=\"firstName\"\r\n                      className=\"form-control\"\r\n                      value={formData.firstName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Last name</label>\r\n                  <input\r\n                      name=\"lastName\"\r\n                      className=\"form-control\"\r\n                      value={formData.lastName}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control\"\r\n                      value={formData.email}\r\n                      onChange={handleChange}\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null\r\n                }\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Signup;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/** Login form.\r\n *\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls login function prop\r\n * - redirects to /companies route\r\n *\r\n * Routes -> LoginForm -> Alert\r\n * Routed as /login\r\n */\r\n\r\nfunction Login({ login }) {\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState([]);\r\n\r\n  console.debug(\r\n      \"LoginForm\",\r\n      \"login=\", typeof login,\r\n      \"formData=\", formData,\r\n      \"formErrors\", formErrors,\r\n  );\r\n\r\n  /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    let result = await login(formData);\r\n    if (result.success) {\r\n      history.push(\"/companies\");\r\n    } else {\r\n      setFormErrors(result.errors);\r\n    }\r\n  }\r\n\r\n  /** Update form data field */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(l => ({ ...l, [name]: value }));\r\n  }\r\n\r\n  return (\r\n      <div className=\"LoginForm\">\r\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n          <h3 className=\"mb-3\">Log In</h3>\r\n\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <label>Username</label>\r\n                  <input\r\n                      name=\"username\"\r\n                      className=\"form-control\"\r\n                      value={formData.username}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"username\"\r\n                      required\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>Password</label>\r\n                  <input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      className=\"form-control\"\r\n                      value={formData.password}\r\n                      onChange={handleChange}\r\n                      autoComplete=\"current-password\"\r\n                      required\r\n                  />\r\n                </div>\r\n\r\n                {formErrors.length\r\n                    ? <Alert type=\"danger\" messages={formErrors} />\r\n                    : null}\r\n\r\n                <button\r\n                    className=\"btn btn-primary float-right\"\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\n/** Search widget.\r\n *\r\n * Appears on CompanyList and JobList so that these can be filtered\r\n * down.\r\n *\r\n * This component doesn't *do* the searching, but it renders the search\r\n * form and calls the `searchFor` function prop that runs in a parent to do the\r\n * searching.\r\n *\r\n * { CompanyList, JobList } -> SearchForm\r\n */\r\n\r\nfunction SearchForm({ searchFor }) {\r\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  /** Tell parent to filter */\r\n  function handleSubmit(evt) {\r\n    // take care of accidentally trying to search for just spaces\r\n    evt.preventDefault();\r\n    searchFor(searchTerm.trim() || undefined);\r\n    setSearchTerm(searchTerm.trim());\r\n  }\r\n\r\n  /** Update form fields */\r\n  function handleChange(evt) {\r\n    setSearchTerm(evt.target.value);\r\n  }\r\n\r\n  return (\r\n      <div className=\"SearchForm mb-4\">\r\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\r\n          <input\r\n              className=\"form-control form-control-lg flex-grow-1\"\r\n              name=\"searchTerm\"\r\n              placeholder=\"Enter search term..\"\r\n              value={searchTerm}\r\n              onChange={handleChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-lg btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get companies (filtered by name if not undefined) */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get list of jobs (filtered by title if not undefined) */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply to a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default JoblyApi;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./CompanyCard.css\";\r\n\r\n/** Show limited information about a company\r\n *\r\n * Is rendered by CompanyList to show a \"card\" for each company.\r\n *\r\n * CompanyList -> CompanyCard\r\n */\r\n\r\nfunction CompanyCard({ name, description, logoUrl, handle }) {\r\n  console.debug(\"CompanyCard\", logoUrl);\r\n\r\n  return (\r\n      <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">\r\n            {name}\r\n            {logoUrl && <img src={logoUrl}\r\n                             alt={name}\r\n                             className=\"float-right ml-5\" />}\r\n          </h6>\r\n          <p><small>{description}</small></p>\r\n        </div>\r\n      </Link>\r\n  );\r\n}\r\n\r\nexport default CompanyCard;\r\n","import React from \"react\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\n/** Loading message used by components that fetch API data. */\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n      <div className=\"LoadingSpinner\">\r\n        Loading ...\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\r\nimport SearchForm from \"../common/SearchForm\";\r\nimport JoblyApi from \"../api\";\r\nimport CompanyCard from \"./CompanyCard\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\n\r\n/** Show page with list of companies.\r\n *\r\n * On mount, loads companies from API.\r\n * Re-loads filtered companies on submit from search form.\r\n *\r\n * This is routed to at /companies\r\n *\r\n * Routes -> { CompanyCard, SearchForm }\r\n */\r\n\r\nfunction CompanyList() {\r\n  console.debug(\"CompanyList\");\r\n\r\n  const [companies, setCompanies] = useState(null);\r\n\r\n  useEffect(function getCompaniesOnMount() {\r\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads companies. */\r\n  async function search(name) {\r\n    let companies = await JoblyApi.getCompanies(name);\r\n    setCompanies(companies);\r\n  }\r\n\r\n  if (!companies) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyList col-md-8 offset-md-2\">\r\n        <SearchForm searchFor={search} />\r\n        {companies.length\r\n            ? (\r\n                <div className=\"CompanyList-list\">\r\n                  {companies.map(c => (\r\n                      <CompanyCard\r\n                          key={c.handle}\r\n                          handle={c.handle}\r\n                          name={c.name}\r\n                          description={c.description}\r\n                          logoUrl={c.logoUrl}\r\n                      />\r\n                  ))}\r\n                </div>\r\n            ) : (\r\n                <p className=\"lead\">Sorry, no results were found!</p>\r\n            )}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyList;\r\n","import React, { useContext, useState } from \"react\";\r\nimport \"./JobCard.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Show limited information about a job.\r\n *\r\n * Is rendered by JobCardList to show a \"card\" for each job.\r\n *\r\n * Receives apply func prop from parent, which is called on apply.\r\n *\r\n * JobCardList -> JobCard\r\n */\r\n\r\nfunction JobCard({ id, title, salary, equity, companyName }) {\r\n  console.debug(\"JobCard\");\r\n\r\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\r\n  const [applied, setApplied] = useState();\r\n\r\n  React.useEffect(function updateAppliedStatus() {\r\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\r\n\r\n    setApplied(hasAppliedToJob(id));\r\n  }, [id, hasAppliedToJob]);\r\n\r\n  /** Apply for a job */\r\n  async function handleApply(evt) {\r\n    if (hasAppliedToJob(id)) return;\r\n    applyToJob(id);\r\n    setApplied(true);\r\n  }\r\n\r\n  return (\r\n      <div className=\"JobCard card\"> {applied}\r\n        <div className=\"card-body\">\r\n          <h6 className=\"card-title\">{title}</h6>\r\n          <p>{companyName}</p>\r\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\r\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\r\n          <button\r\n              className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\r\n              onClick={handleApply}\r\n              disabled={applied}\r\n          >\r\n            {applied ? \"Applied\" : \"Apply\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n/** Render integer salary like '$1,250,343' */\r\n\r\nfunction formatSalary(salary) {\r\n  const digitsRev = [];\r\n  const salaryStr = salary.toString();\r\n\r\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\r\n    digitsRev.push(salaryStr[i]);\r\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\r\n  }\r\n\r\n  return digitsRev.reverse().join(\"\");\r\n}\r\n\r\n\r\nexport default JobCard;\r\n","import React from \"react\";\r\nimport JobCard from \"./JobCard\";\r\n\r\n/** Show list of job cards.\r\n *\r\n * Used by both JobList and CompanyDetail to list jobs. Receives an apply\r\n * func prop which will be called by JobCard on apply.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n * CompanyDetail -> JobCardList -> JobCard\r\n *\r\n */\r\n\r\nfunction JobCardList({ jobs, apply }) {\r\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\r\n\r\n  return (\r\n      <div className=\"JobCardList\">\r\n        {jobs.map(job => (\r\n            <JobCard\r\n                key={job.id}\r\n                id={job.id}\r\n                title={job.title}\r\n                salary={job.salary}\r\n                equity={job.equity}\r\n                companyName={job.companyName}\r\n            />\r\n        ))}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobCardList;","import React, { useState, useEffect } from \"react\";\r\nimport Search from \"../common/SearchForm\";\r\nimport JoblyApi from \"../api\";\r\nimport JobCardList from \"./JobCardList\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\n\r\n/** Show page with list of jobs.\r\n *\r\n * On mount, loads jobs from API.\r\n * Re-loads filtered jobs on submit from search form.\r\n *\r\n * JobList -> JobCardList -> JobCard\r\n *\r\n * This is routed to at /jobs\r\n */\r\n\r\nfunction JobList() {\r\n  console.debug(\"JobList\");\r\n\r\n  const [jobs, setJobs] = useState(null);\r\n\r\n  useEffect(function getAllJobsOnMount() {\r\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\r\n    search();\r\n  }, []);\r\n\r\n  /** Triggered by search form submit; reloads jobs. */\r\n  async function search(title) {\r\n    let jobs = await JoblyApi.getJobs(title);\r\n    setJobs(jobs);\r\n  }\r\n\r\n  if (!jobs) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"JobList col-md-8 offset-md-2\">\r\n        <Search searchFor={search} />\r\n        {jobs.length\r\n            ? <JobCardList jobs={jobs} />\r\n            : <p className=\"lead\">Sorry, no results were found!</p>\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default JobList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport JoblyApi from \"../api\";\r\nimport JobCardList from \"../jobs/JobCardList\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\n\r\n/** Company Detail page.\r\n *\r\n * Renders information about company, along with the jobs at that company.\r\n *\r\n * Routed at /companies/:handle\r\n *\r\n * Routes -> CompanyDetail -> JobCardList\r\n */\r\n\r\nfunction CompanyDetail() {\r\n  const { handle } = useParams();\r\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\r\n\r\n  const [company, setCompany] = useState(null);\r\n\r\n  useEffect(function getCompanyAndJobsForUser() {\r\n    async function getCompany() {\r\n      setCompany(await JoblyApi.getCompany(handle));\r\n    }\r\n\r\n    getCompany();\r\n  }, [handle]);\r\n\r\n  if (!company) return <LoadingSpinner />;\r\n\r\n  return (\r\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\r\n        <h4>{company.name}</h4>\r\n        <p>{company.description}</p>\r\n        <JobCardList jobs={company.jobs} />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CompanyDetail;\r\n","import React , {useState , useContext} from 'react';\r\nimport Alert from \"../common/Alert\";\r\nimport JoblyApi from \"../api\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n\r\nfunction ProfileForm(){\r\n    const { currentUser, setCurrentUser } = useContext(UserContext);\r\n    const [formData, setFormData] = useState({\r\n      firstName: currentUser.firstName,\r\n      lastName: currentUser.lastName,\r\n      email: currentUser.email,\r\n      username: currentUser.username,\r\n      password: \"\",\r\n    });\r\n    const [formErrors, setFormErrors] = useState([]);\r\n  \r\n    // switch to use our fancy limited-time-display message hook\r\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\r\n    // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\r\n\r\n    console.debug(\r\n        \"ProfileForm\",\r\n        \"currentUser=\", currentUser,\r\n        \"formData=\", formData,\r\n        \"formErrors=\", formErrors,\r\n        \"saveConfirmed=\", saveConfirmed,\r\n    );\r\n\r\n    /** on form submit:\r\n   * - attempt save to backend & report any errors\r\n   * - if successful\r\n   *   - clear previous error messages and password\r\n   *   - show save-confirmed message\r\n   *   - set current user info throughout the site\r\n   */\r\n\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n\r\n    let profileData = {\r\n      firstName: formData.firstName,\r\n      lastName: formData.lastName,\r\n      email: formData.email,\r\n      password: formData.password,\r\n    };\r\n\r\n    let username = formData.username;\r\n    let updatedUser;\r\n\r\n    try {\r\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\r\n    } catch (errors) {\r\n      debugger;\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n\r\n    setFormData(f => ({ ...f, password: \"\" }));\r\n    setFormErrors([]);\r\n    setSaveConfirmed(true);\r\n\r\n    // trigger reloading of user information throughout the site\r\n    setCurrentUser(updatedUser);\r\n  }\r\n\r\n  /** Handle form data changing */\r\n  function handleChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(f => ({\r\n      ...f,\r\n      [name]: value,\r\n    }));\r\n    setFormErrors([]);\r\n  }\r\n  \r\n    return(\r\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\r\n        <h3>Profile</h3>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label>Username</label>\r\n                <p className=\"form-control-plaintext\">{formData.username}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>First Name</label>\r\n                <input\r\n                    name=\"firstName\"\r\n                    className=\"form-control\"\r\n                    value={formData.firstName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Last Name</label>\r\n                <input\r\n                    name=\"lastName\"\r\n                    className=\"form-control\"\r\n                    value={formData.lastName}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                    name=\"email\"\r\n                    className=\"form-control\"\r\n                    value={formData.email}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Confirm password to make changes:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    value={formData.password}\r\n                    onChange={handleChange}\r\n                />\r\n              </div>\r\n\r\n              {formErrors.length\r\n                  ? <Alert type=\"danger\" messages={formErrors} />\r\n                  : null}\r\n\r\n              {saveConfirmed\r\n                  ?\r\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\r\n                  : null}\r\n\r\n              <button\r\n                  className=\"btn btn-primary btn-block mt-4\"\r\n                  onClick={handleSubmit}\r\n              >\r\n                Save Changes\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\nfunction PrivacyRoute({ exact, path, children }) {\r\n    const { currentUser } = useContext(UserContext);\r\n  \r\n    console.debug(\r\n        \"PrivateRoute\",\r\n        \"exact=\", exact,\r\n        \"path=\", path,\r\n        \"currentUser=\", currentUser,\r\n    );\r\n  \r\n    if (!currentUser) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n  \r\n    return (\r\n        <Route exact={exact} path={path}>\r\n          {children}\r\n        </Route>\r\n    );\r\n  }\r\n\r\n\r\nexport default PrivacyRoute;","import React from 'react';\r\nimport {Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Homepage from '../homepage/Homepage'\r\nimport Signup from '../auth/Signup';\r\nimport Login from '../auth/Login';\r\nimport CompanyList from '../companies/CompanyList';\r\nimport JobList from '../jobs/JobList';\r\nimport CompanyDetail from '../companies/CompanyDetail';\r\nimport ProfileForm from '../profile/ProfileForm';\r\nimport PrivacyRoute from './PrivacyRoute';\r\n\r\n\r\nfunction Routes({login , signup}){\r\nreturn(\r\n    <div>\r\n\r\n        <Switch>\r\n\r\n            <Route exact path=\"/\">\r\n                <Homepage />\r\n            </Route>\r\n\r\n            <Route exact path=\"/login\">\r\n                <Login login={login}/>\r\n            </Route>\r\n\r\n            <Route exact path=\"/signup\">\r\n                <Signup signup={signup}/>\r\n            </Route>\r\n\r\n            <PrivacyRoute exact path=\"/companies\">\r\n                <CompanyList />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/companies/:handle\">\r\n                <CompanyDetail />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/jobs\">\r\n                <JobList />\r\n            </PrivacyRoute>\r\n\r\n            <PrivacyRoute exact path=\"/profile\">\r\n                <ProfileForm />\r\n            </PrivacyRoute>\r\n\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Routes;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./router/Navigation\";\nimport Routes from \"./router/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      console.log(setToken(token))\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}